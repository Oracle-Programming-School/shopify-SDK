package com.ordg.blueb.pos.sales;

import com.formdev.flatlaf.FlatLightLaf;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.Barcode128;
import com.itextpdf.text.pdf.Barcode39;
import com.itextpdf.text.pdf.BarcodeQRCode;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import com.ordg.utl.collections.Constants;
import com.ordg.utl.collections.DataLoader;
import com.ordg.utl.database.OracleConnection;
import com.ordg.utl.log.Console;
import com.ordg.utl.configurations.SystemInformation;
import com.ordg.utl.dashboard.Dashboard;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageInputStream;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import com.ordg.utl.configurations.AppDataUtils;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPageable;
import org.apache.pdfbox.rendering.PDFRenderer;

public class Sales extends javax.swing.JPanel {

    /**
     * Creates new form Sales
     */
    DefaultTableModel saleModel;
    int SaleHeaderId = 0;

    Font LableFont = new Font(Font.FontFamily.TIMES_ROMAN, 06, Font.BOLD);
    Font ValueFont = new Font(Font.FontFamily.TIMES_ROMAN, 06, Font.NORMAL);

    public Sales() {
        
        /* try {
        UIManager.setLookAndFeel(new FlatLightLaf());
    } catch (UnsupportedLookAndFeelException ex) {
        // Handle the exception if needed
    }*/


        initComponents();

        this.STORE_NAME.setText(Constants.get("APP_STORE_NAME"));
        GST_PERCENTAGE.setText(Constants.get("APP_GST_PERCENTAGE"));
        POS_CHARGES.setText("1");

        saleModel = (DefaultTableModel) jTable1.getModel();

        // Delete key event listener
        jTable1.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_DELETE) { // if the delete key is pressed
                    int selectedRow = jTable1.getSelectedRow();
                    if (selectedRow != -1) { // if a row is selected
                        saleModel.removeRow(selectedRow);
                        CalculateHeader();
                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        FBR_INVOICE_NUM = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SALE_INVOICE_NUM = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        SALE_INVOICE_DATE = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        STORE_NAME = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CUSTOMER_TYPE = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        CUSTOMER_NAME = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        MOBILE_NUMBER = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Total_Number_Of_Item = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Total_Quantity_of_Item = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        SUB_TOTAL = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        GST_PERCENTAGE = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        GST_AMOUNT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        DISCOUNT_AMOUNT = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        POS_CHARGES = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        TOTAL_AMOUNT = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        TRANSACTION_TYPE = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        TRANSACTION_REFERANCE = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        AMOUNT_RECEIVED = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        AMOUNT_REMAINING = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        SaveBtn = new javax.swing.JButton();
        BillPreview = new javax.swing.JButton();
        Print = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        barcode = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        addItems = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.CardLayout());

        jSplitPane1.setDividerSize(1);
        jSplitPane1.setFocusable(false);

        jPanel2.setMinimumSize(new java.awt.Dimension(300, 600));
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 600));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invoice Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(153, 153, 255))); // NOI18N
        jPanel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        jPanel6.setLayout(new java.awt.GridLayout(7, 2));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 102, 255));
        jLabel26.setText("FBR Invoice #");
        jPanel6.add(jLabel26);

        FBR_INVOICE_NUM.setEditable(false);
        FBR_INVOICE_NUM.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        FBR_INVOICE_NUM.setForeground(new java.awt.Color(0, 102, 255));
        jPanel6.add(FBR_INVOICE_NUM);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("Invoice #");
        jPanel6.add(jLabel3);

        SALE_INVOICE_NUM.setEditable(false);
        SALE_INVOICE_NUM.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        SALE_INVOICE_NUM.setForeground(new java.awt.Color(0, 102, 255));
        jPanel6.add(SALE_INVOICE_NUM);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 255));
        jLabel4.setText("Invoice Date");
        jPanel6.add(jLabel4);

        SALE_INVOICE_DATE.setEditable(false);
        SALE_INVOICE_DATE.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        SALE_INVOICE_DATE.setForeground(new java.awt.Color(0, 102, 255));
        jPanel6.add(SALE_INVOICE_DATE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 255));
        jLabel2.setText("Store Name");
        jPanel6.add(jLabel2);

        STORE_NAME.setEditable(false);
        STORE_NAME.setFont(new java.awt.Font("Segoe UI", 1, 8)); // NOI18N
        STORE_NAME.setForeground(new java.awt.Color(0, 102, 255));
        jPanel6.add(STORE_NAME);

        jLabel5.setText("Customer Type");
        jPanel6.add(jLabel5);

        CUSTOMER_TYPE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Walk-In", "Whole Sale", "Online" }));
        jPanel6.add(CUSTOMER_TYPE);

        jLabel6.setText("Customer Name");
        jPanel6.add(jLabel6);

        CUSTOMER_NAME.setText("Walk-IN");
        jPanel6.add(CUSTOMER_NAME);

        jLabel7.setText("Mobile #");
        jPanel6.add(jLabel7);
        jPanel6.add(MOBILE_NUMBER);

        jPanel2.add(jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary"));
        jPanel5.setLayout(new java.awt.GridLayout(12, 2));

        jLabel8.setText("Total Number of Item");
        jPanel5.add(jLabel8);

        Total_Number_Of_Item.setEditable(false);
        jPanel5.add(Total_Number_Of_Item);

        jLabel9.setText("Total Quantity of Item");
        jPanel5.add(jLabel9);

        Total_Quantity_of_Item.setEditable(false);
        jPanel5.add(Total_Quantity_of_Item);

        jLabel10.setText("Sub Total");
        jPanel5.add(jLabel10);

        SUB_TOTAL.setEditable(false);
        jPanel5.add(SUB_TOTAL);

        jLabel11.setText("GST %");
        jPanel5.add(jLabel11);

        GST_PERCENTAGE.setEditable(false);
        jPanel5.add(GST_PERCENTAGE);

        jLabel18.setText("GST Amount");
        jPanel5.add(jLabel18);

        GST_AMOUNT.setEditable(false);
        jPanel5.add(GST_AMOUNT);

        jLabel12.setText("Total Discount");
        jPanel5.add(jLabel12);

        DISCOUNT_AMOUNT.setEditable(false);
        jPanel5.add(DISCOUNT_AMOUNT);

        jLabel25.setText("POS Service Charges");
        jPanel5.add(jLabel25);

        POS_CHARGES.setEditable(false);
        jPanel5.add(POS_CHARGES);

        jLabel13.setText("Total Amount");
        jPanel5.add(jLabel13);

        TOTAL_AMOUNT.setEditable(false);
        TOTAL_AMOUNT.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jPanel5.add(TOTAL_AMOUNT);

        jLabel14.setText("Transaction Type");
        jPanel5.add(jLabel14);

        TRANSACTION_TYPE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Debit / Credit Card", "Jazz Cash" }));
        jPanel5.add(TRANSACTION_TYPE);

        jLabel15.setText("Transaction Referance");
        jPanel5.add(jLabel15);

        TRANSACTION_REFERANCE.setEditable(false);
        TRANSACTION_REFERANCE.setEnabled(false);
        jPanel5.add(TRANSACTION_REFERANCE);

        jLabel16.setText("Received");
        jPanel5.add(jLabel16);

        AMOUNT_RECEIVED.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AMOUNT_RECEIVED.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AMOUNT_RECEIVEDKeyReleased(evt);
            }
        });
        jPanel5.add(AMOUNT_RECEIVED);

        jLabel17.setText("Remaining");
        jPanel5.add(jLabel17);

        AMOUNT_REMAINING.setEditable(false);
        AMOUNT_REMAINING.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AMOUNT_REMAINING.setForeground(new java.awt.Color(255, 102, 0));
        jPanel5.add(AMOUNT_REMAINING);

        jPanel2.add(jPanel5);

        SaveBtn.setText("Save Invoice");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });
        jPanel7.add(SaveBtn);

        BillPreview.setText("Bill Preview");
        BillPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillPreviewActionPerformed(evt);
            }
        });
        jPanel7.add(BillPreview);

        Print.setText("Print");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintBtnActionPerformed(evt);
            }
        });
        jPanel7.add(Print);

        jPanel2.add(jPanel7);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Product Scanning", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel10.setLayout(new java.awt.GridLayout(0, 4));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel19.setText("Barcode");
        jPanel10.add(jLabel19);

        barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeKeyReleased(evt);
            }
        });
        jPanel10.add(barcode);
        jPanel10.add(filler1);

        addItems.setText("Add Item");
        addItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemsActionPerformed(evt);
            }
        });
        jPanel10.add(addItems);

        jPanel1.add(jPanel10);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.CardLayout());

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setEnabled(false);
        jScrollPane1.setFocusCycleRoot(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemBarcode", "SKU", "Name", "Price (incl.GST)", "UOM", "Quantity", "Discount%", "Discount Amount", "Value (Excl.GST)", "GST %", "GST Amount", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(230);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(10).setResizable(false);
            jTable1.getColumnModel().getColumn(10).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(11).setResizable(false);
            jTable1.getColumnModel().getColumn(11).setPreferredWidth(100);
        }
        jTable1.getAccessibleContext().setAccessibleParent(jScrollPane1);

        jPanel4.add(jScrollPane1, "card2");

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        add(jSplitPane1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void PrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintBtnActionPerformed

        if ("".equals(this.FBR_INVOICE_NUM.getText())) {
            Console.showError("Unable to generate output, As FBR # is not available", this.getClass());
            return;
        }
        File file = new File(this.getReportName());
        try ( PDDocument document = PDDocument.load(file)) {
            PrinterJob job = PrinterJob.getPrinterJob();
            job.setPageable(new PDFPageable(document));
            if (job.printDialog()) {
                try {
                    job.print();
                } catch (PrinterException e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_PrintBtnActionPerformed


    private void addItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemsActionPerformed
        // TODO add your handling code here:

        String searchText = barcode.getText().trim();

        ProductSearch ps = new ProductSearch(this);
        JFrame jf = new JFrame();
        jf.add(ps);
        jf.setVisible(true);
        jf.setSize(new Dimension(800, 600));
        Dashboard.display.setFrameInCenter(jf);

    }//GEN-LAST:event_addItemsActionPerformed

    public void addRowToTable(String Itembarcode, String sku, String name, double price, String uom, int quantity) {

        double subAmount, gstPct, gstAmt, totalAmt, discountPct, discountAmt;

        discountPct = 0;
        discountAmt = 0;
        quantity = 1;
        gstPct = Double.parseDouble(Constants.get("APP_GST_PERCENTAGE"));

        totalAmt = roundToOneDecimal((price * quantity) - discountAmt);

        gstAmt = roundToOneDecimal((totalAmt / (100 + gstPct)) * (gstPct));

        subAmount = roundToOneDecimal((totalAmt - gstAmt));

        Object[] row = new Object[]{Itembarcode, sku, name, price, uom, quantity, discountPct, discountAmt, subAmount, gstPct, gstAmt, totalAmt};
        saleModel.addRow(row);

        CalculateHeader();
    }


    private void barcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeKeyReleased

        String searchText = barcode.getText().trim();

        if (searchText.length() == 8) {
            for (ItemVO item : DataLoader.getItemVOList()) {

                if (item.getItemBarcode().equalsIgnoreCase(searchText)) {
                    //System.out.println(searchText);
                    addRowToTable(
                            item.getItemBarcode(), item.getSkuName(), item.getStyleName(), item.getRetPrice(), "PCS", 1);
                    barcode.setText("");
                    break;
                }
            }
        }


    }//GEN-LAST:event_barcodeKeyReleased

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        // TODO add your handling code here:
        try {
            SaveBtnPressed();
        } catch (Exception ex) {
            Console.showError(ex.getMessage(), this.getClass());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_SaveBtnActionPerformed

    private void AMOUNT_RECEIVEDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMOUNT_RECEIVEDKeyReleased
        // TODO add your handling code here:
        this.AMOUNT_REMAINING.setText(
                String.valueOf(Double.parseDouble(this.AMOUNT_RECEIVED.getText())
                        - Double.parseDouble(this.TOTAL_AMOUNT.getText())
                )
        );
    }//GEN-LAST:event_AMOUNT_RECEIVEDKeyReleased

    private void BillPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillPreviewActionPerformed
        // TODO add your handling code here:
        try {
            if ("".equals(this.FBR_INVOICE_NUM.getText())) {
                Console.showError("Unable to generate output, As FBR # is not available", this.getClass());
                return;
            }

            GeneratePDF();
            openPdfInPanel();
        } catch (Exception ex) {
            Console.showError("Error in preview bill.", this.getClass());
            Console.write(ex);
        }
    }//GEN-LAST:event_BillPreviewActionPerformed

    void SaveBtnPressed() {
        if ((saleModel.getRowCount() == 0)) {
            Console.showError("This sale cannot be saved as there is no data available to be saved.", this.getClass());
            return;
        }

        if ("".equals(this.AMOUNT_RECEIVED.getText())) {
            Console.showError("Please enter recieved amount.", this.getClass());
            return;
        }

        Double amountReceived = Double.parseDouble(this.AMOUNT_REMAINING.getText());
        if (amountReceived < 0) {
            Console.showError("Remaining amount cannot be lesser than zero.", this.getClass());
            return;
        }

        // Check FBR #
        if ((!"".equals(this.FBR_INVOICE_NUM.getText()))) {
            Console.showError("Unable to save the transaction as document is already saved.", this.getClass());
            return;
        }

        if (("".equals(this.SALE_INVOICE_NUM.getText())) // Invoice not exists
                ) {
            postSaleToDatabase();
        }

        if (("".equals(this.FBR_INVOICE_NUM.getText()))// FBR Invoice not exists
                ) {
            postFRBSale();
        }

        lockForm();

        GeneratePDF();

    }

    void postFRBSale() {

        try {
            JSONObject invoiceData = generateJson();

            Console.write(invoiceData.toString());
            
            String response = sendInvoice(invoiceData.toString());
            JSONObject responseObj = new JSONObject(response);

            Console.write(responseObj.toString());

            if ("".equals(responseObj.optString("Errors"))) {
                String fbrInvoiceNumber = responseObj.getString("InvoiceNumber");

                this.FBR_INVOICE_NUM.setText(fbrInvoiceNumber);

                PreparedStatement stmt = null;
                // Define the SQL query
                String query = "UPDATE pos_transaction_headers "
                        + "SET FBR_INVOICE_SYSDATE=sysdate, FBR_INVOICE_NUMBER ='" + fbrInvoiceNumber + "' ,"
                        + "FBR_INVOICE_DATE =" + "'" + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME) + "' "
                        + "WHERE type_id = 30 AND HEADER_ID =" + this.SaleHeaderId;

                System.out.println(query);

                // Prepare the SQL statement
                stmt = OracleConnection.getConnection().prepareStatement(query);

                // Execute the SQL statement
                stmt.executeUpdate();
                stmt.close();
                
            } else {
                Console.showError(responseObj.getString("Response"), this.getClass());
                Console.write(responseObj.getString("Response"));
            }
            
        } catch (Exception ex) {
            Console.showError("Unexpected Error in FBR invoice data" + ex.getMessage(), this.getClass());
            Console.write(ex);
            ex.printStackTrace();

        }

    }

    void postSaleToDatabase() {

        String procedureCall = "{ call POS_Transaction_PKG.Create_Sale_header(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?) }";

        try (
                 CallableStatement stmt = OracleConnection.getConnection().prepareCall(procedureCall)) {
            String[] systemInformation = SystemInformation.getSystemInformation();
            String ipAddress = systemInformation[0];
            String macAddress = systemInformation[1];
            String hostname = systemInformation[2];
            System.out.println("IP address: " + ipAddress);
            System.out.println("MAC address: " + macAddress);
            System.out.println("Hostname: " + hostname);

            // Set the input parameters
            stmt.setString(1, Constants.get("APP_STORE_ID"));
            stmt.setString(2, this.CUSTOMER_TYPE.getSelectedItem().toString());
            stmt.setString(3, this.CUSTOMER_NAME.getText());
            stmt.setString(4, (this.SUB_TOTAL.getText()));
            stmt.setString(5, (this.GST_PERCENTAGE.getText()));
            stmt.setString(6, (this.GST_AMOUNT.getText()));
            stmt.setString(7, (this.DISCOUNT_AMOUNT.getText()));
            stmt.setString(8, (this.TOTAL_AMOUNT.getText()));
            stmt.setString(9, this.TRANSACTION_TYPE.getSelectedItem().toString());
            stmt.setString(10, this.TRANSACTION_REFERANCE.getText());
            stmt.setString(11, ipAddress);
            stmt.setString(12, macAddress);
            stmt.setString(13, hostname);
            stmt.setString(14, LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));
            stmt.setString(15, this.AMOUNT_RECEIVED.getText());
            stmt.setString(16, this.AMOUNT_REMAINING.getText());

            // Register the output parameters
            stmt.registerOutParameter(17, Types.INTEGER);
            stmt.registerOutParameter(18, Types.VARCHAR);
            stmt.registerOutParameter(19, Types.VARCHAR);
            stmt.registerOutParameter(20, Types.VARCHAR);
            stmt.registerOutParameter(21, Types.VARCHAR);

            // Execute the procedure
            stmt.execute();

            // Get the output parameters
            int x_header_id = stmt.getInt(17);
            String x_transaction_number = stmt.getString(18);
            String x_transaction_date = stmt.getString(19);
            String x_status = stmt.getString(20);
            String x_message = stmt.getString(21);

            if (x_status.equals("S")) {
                this.SALE_INVOICE_NUM.setText(x_transaction_number);
                SaleHeaderId = x_header_id;
                this.SALE_INVOICE_DATE.setText(x_transaction_date);
            } else {
                Console.showError(x_message, this.getClass());
                return;
            }

            // Use the output parameters as needed
            Console.write("x_header_id: " + x_header_id);
            Console.write("x_transaction_number: " + x_transaction_number);
            Console.write("x_transaction_date: " + x_transaction_date);
            Console.write("x_status: " + x_status);
            Console.write("x_message: " + x_message);

            stmt.close();

            int rowCount = saleModel.getRowCount();

            for (int row = 0; row < rowCount; row++) {

                // Call Procedure to Insert Lines in tables
                procedureCall = "{call POS_Transaction_PKG.Create_Sale_line(?,?,?,?,?,?,?,?,?,?,?,?,?)}";

                CallableStatement lineCall = OracleConnection.getConnection().prepareCall(procedureCall);

                String barcode = saleModel.getValueAt(row, 0).toString();
                String sku = saleModel.getValueAt(row, 1).toString();
                String name = saleModel.getValueAt(row, 2).toString();
                String priceInclGst = saleModel.getValueAt(row, 3).toString();
                String uom = saleModel.getValueAt(row, 4).toString();
                int quantity = Integer.valueOf(saleModel.getValueAt(row, 5).toString());
                String discountPercent = saleModel.getValueAt(row, 6).toString();
                String discountAmount = saleModel.getValueAt(row, 7).toString();
                String valueExclGst = saleModel.getValueAt(row, 8).toString();
                String gstPercent = saleModel.getValueAt(row, 9).toString();
                String gstAmount = saleModel.getValueAt(row, 10).toString();
                String totalAmount = saleModel.getValueAt(row, 11).toString();

                // Set the input parameters
                lineCall.setInt(1, this.SaleHeaderId);
                lineCall.setString(2, sku);
                lineCall.setString(3, priceInclGst);
                lineCall.setInt(4, quantity);
                lineCall.setString(5, discountPercent);
                lineCall.setString(6, discountAmount);
                lineCall.setString(7, gstPercent);
                lineCall.setString(8, gstAmount);
                lineCall.setString(9, valueExclGst);
                lineCall.setString(10, totalAmount);
                lineCall.setString(11, barcode);

                // Register the output parameters
                lineCall.registerOutParameter(12, Types.VARCHAR);
                lineCall.registerOutParameter(13, Types.VARCHAR);

                // Execute the procedure
                lineCall.execute();

                // Get the output parameters
                String lx_status = lineCall.getString(12);
                String lx_Message = lineCall.getString(13);

                if ("E".equals(lx_status)) {
                    Console.showError(lx_Message, this.getClass());
                }

                // Use the output parameters as needed
                Console.write("x_status: " + x_status);
                Console.write("x_Message: " + lx_Message);

                lineCall.close();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    void lockForm() {

        if ("".equals(this.SALE_INVOICE_NUM.getText())) {
            return;
        }

        boolean unlock = false;
        this.AMOUNT_RECEIVED.setEditable(unlock);
        this.TRANSACTION_TYPE.setEnabled(unlock);
        this.MOBILE_NUMBER.setEnabled(unlock);
        this.barcode.setEditable(unlock);
        this.addItems.setEnabled(unlock);
        this.CUSTOMER_NAME.setEditable(unlock);
        this.CUSTOMER_TYPE.setEnabled(unlock);
        this.jTable1.setEnabled(unlock);
        if (!"".equals(this.FBR_INVOICE_NUM.getText())) {
            this.SaveBtn.setEnabled(unlock);
        }

    }

    void CalculateHeader() {
        int rowCount = saleModel.getRowCount();
        Total_Number_Of_Item.setText(String.valueOf(rowCount));

        int sumQuantity = 0;
        double sumSubAmount = 0.0;
        double sumDiscountAmt = 0.0;
        double sumGstAmt = 0.0;
        double sumTotalAmt = 0.0;

        for (int i = 0; i < rowCount; i++) {

            int quantity = Integer.parseInt(saleModel.getValueAt(i, 5).toString());
            sumQuantity += quantity;

            double subAmount = Double.parseDouble(saleModel.getValueAt(i, 8).toString());
            sumSubAmount += subAmount;

            double discountAmt = Double.parseDouble(saleModel.getValueAt(i, 7).toString());
            sumDiscountAmt += discountAmt;

            double gstAmt = Double.parseDouble(saleModel.getValueAt(i, 10).toString());
            sumGstAmt += gstAmt;

            double totalAmt = Double.parseDouble(saleModel.getValueAt(i, 11).toString());
            sumTotalAmt += totalAmt;

        }

        sumTotalAmt = roundToOneDecimal(sumTotalAmt);
        sumGstAmt = roundToOneDecimal(sumGstAmt);
        sumSubAmount = roundToOneDecimal(sumSubAmount);

        Total_Quantity_of_Item.setText(String.valueOf(sumQuantity));
        SUB_TOTAL.setText(String.valueOf(sumSubAmount));
        GST_AMOUNT.setText(String.valueOf(sumGstAmt));
        DISCOUNT_AMOUNT.setText(String.valueOf(sumDiscountAmt));
        TOTAL_AMOUNT.setText(String.valueOf(sumTotalAmt + Integer.valueOf(POS_CHARGES.getText())));

        if (!"".equals(this.AMOUNT_RECEIVED.getText())) {
            this.AMOUNT_REMAINING.setText(
                    String.valueOf(Double.parseDouble(this.AMOUNT_RECEIVED.getText())
                            - Double.parseDouble(this.TOTAL_AMOUNT.getText())
                    )
            );
        }
    }

    public static double roundToOneDecimal(double value) {
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(1, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    JSONObject generateJson() throws SQLException {
        // Define the SQL query
        String query = "SELECT pl.sku_name ItemCode, pv.STYLE_NAME ItemName, primary_quantity Quantity, "
                + " gst_percentage TaxRate, SUB_TOTAL_AMOUNT SaleValue, TOTAL_AMOUNT TotalAmount, gst_amount TaxCharged, "
                + " Discount_amount Discount, 0 FurtherTax, 1 InvoiceType, pl.item_barcode RefUSIN "
                + " FROM pos_transaction_lines pl, POSC_INV_SYSTEM_ITEMS_ALL pv "
                + " WHERE pl.TYPE_ID = 30 and pl.store_id = pv.store_id "
                + " and pl.sku_name = pv.sku_name and pl.item_barcode = pv.BARCODE "
                + " AND pl.header_id =" + this.SaleHeaderId;

        // Prepare the SQL statement
        PreparedStatement stmt = OracleConnection.getConnection().prepareStatement(query);
        stmt.setFetchSize(10000);
        
        // Execute the SQL query and fetch the results
        ResultSet rs = stmt.executeQuery();

        // Create a JSON array to hold the items
        JSONArray items = new JSONArray();

        // Iterate over the result set and create a JSON object for each item
        while (rs.next()) {
            JSONObject item = new JSONObject();
            item.put("ItemCode", rs.getString("ItemCode"));
            item.put("ItemName", rs.getString("ItemName"));
            item.put("Quantity", rs.getFloat("Quantity"));
            item.put("PCTCode", Constants.get("APP_PCT_CODE") );
            item.put("TaxRate", rs.getFloat("TaxRate"));
            item.put("SaleValue", rs.getFloat("SaleValue"));
            item.put("TotalAmount", rs.getFloat("TotalAmount"));
            item.put("TaxCharged", rs.getFloat("TaxCharged"));
            item.put("Discount", rs.getFloat("Discount"));
            item.put("FurtherTax", rs.getFloat("FurtherTax"));
            item.put("InvoiceType", rs.getInt("InvoiceType"));
            item.put("RefUSIN", rs.getString("RefUSIN"));
            items.put(item);
        }

        // Create a JSON object to hold the invoice data
        JSONObject invoice = new JSONObject();

        // Define the SQL query
        query = "SELECT null InvoiceNumber, transaction_number USIN, to_Char(sysdate,'rrrr-mm-dd hh24:mi:ss') DateTime, "
                + "null BuyerNTN, null BuyerCNIC, customer_name BuyerName, mobile_number BuyerPhoneNumber, "
                + "TOTAL_AMOUNT TotalBillAmount, (SELECT SUM(primary_quantity) FROM pos_transaction_lines pl WHERE pl.TYPE_ID = ph.type_id AND pl.header_id = ph.header_id) TotalQuantity, "
                + "sub_total TotalSaleValue, GST_AMOUNT TotalTaxCharged, total_discount, 0 FurtherTax, 1 PaymentMode, transaction_number RefUSIN, 1 InvoiceType "
                + "FROM pos_transaction_headers ph "
                + "WHERE ph.TYPE_ID = 30 AND ph.header_id =" + this.SaleHeaderId;

        // Prepare the SQL statement
        stmt = OracleConnection.getConnection().prepareStatement(query);
        stmt.setFetchSize(100);
        // Execute the SQL query and fetch the results
        rs = stmt.executeQuery();

        // Iterate over the result set and populate the invoice object with data
        if (rs.next()) {
            invoice.put("InvoiceNumber", rs.getString("InvoiceNumber"));
            invoice.put("POSID",  Constants.get("APP_POS_ID"));
            invoice.put("USIN", rs.getString("USIN"));
            invoice.put("DateTime", rs.getString("DateTime"));
            invoice.put("BuyerNTN", rs.getString("BuyerNTN"));
            invoice.put("BuyerCNIC", rs.getString("BuyerCNIC"));
            invoice.put("BuyerName", rs.getString("BuyerName"));
            invoice.put("BuyerPhoneNumber", rs.getString("BuyerPhoneNumber"));
            invoice.put("TotalBillAmount", rs.getFloat("TotalBillAmount"));
            invoice.put("TotalQuantity", rs.getFloat("TotalQuantity"));
            invoice.put("TotalSaleValue", rs.getFloat("TotalSaleValue"));
            invoice.put("TotalTaxCharged", rs.getFloat("TotalTaxCharged"));
            invoice.put("Discount", rs.getFloat("total_discount"));
            invoice.put("FurtherTax", rs.getFloat("FurtherTax"));
            invoice.put("PaymentMode", rs.getInt("PaymentMode"));
            invoice.put("RefUSIN", rs.getString("RefUSIN"));
            invoice.put("InvoiceType", rs.getInt("InvoiceType"));
        }

        //Lines
        invoice.put("Items", items);

        stmt.close();
        rs.close();

        return invoice;
    }

    public static String sendInvoice(String json) throws IOException {
        OkHttpClient client = new OkHttpClient().newBuilder().build();
        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, json);
        Request request = new Request.Builder()
                .url("http://" + Constants.get("APP_FBR_HOST") + ":" + Constants.get("APP_FBR_PORT") + "/api/IMSFiscal/GetInvoiceNumberByModel")
                .method("POST", body)
                .addHeader("Content-Type", "application/json")
                .build();
        Response response = client.newCall(request).execute();
        return response.body().string();
    }

    private Paragraph addEmptyLine(int number) {
        Paragraph p = new Paragraph();
        for (int i = 0; i < number; i++) {
            p.add(new Paragraph(" "));
        }
        return p;
    }

    public Image createBarcodeImage(PdfContentByte cb, String text, float width, float height) throws Exception {
        Barcode128 barcode = new Barcode128();
        barcode.setCode(text);
        barcode.setCodeType(Barcode128.CODE128);
        Image image = barcode.createImageWithBarcode(cb, null, null);
        //image.scaleAbsolute(width, height);
        return image;
    }

    void GeneratePDF() {

        try {

            // Set document width and height to match 80 mm thermal paper
            float width = mmToPoints(80);
            float height = mmToPoints(150); // Height is set to a long length since thermal paper is continuous roll
            Document document = new Document(new Rectangle(width, height));
            PdfWriter pf = PdfWriter.getInstance(document, new FileOutputStream(getReportName()));

            // Set margins to 10 points on all sides
            float margin = mmToPoints(1); // Set a 1 mm margin on all sides
            document.setMargins(margin, margin, 0, 0);

            document.open();

            Paragraph TopPg = new Paragraph();
            TopPg.setAlignment(Element.ALIGN_JUSTIFIED_ALL);

            Paragraph logoPg = new Paragraph();
            File file = new File(AppDataUtils.getConfigPath() + "blub.jpg");
            Image image = convert(ImageIO.read(file));
            image.setWidthPercentage(20);
            image.scaleToFit(40, 30);
            logoPg.setAlignment(Element.ALIGN_CENTER);
            logoPg.add(image);

            TopPg.add(logoPg);
            TopPg.add(createBarcodeImage(pf.getDirectContent(), this.FBR_INVOICE_NUM.getText(), 0, 0));
            document.add(TopPg);

            addInvoiceHeader(document);
            document.add(getLine());
            addInvoiceLines(document);
            document.add(getLine());
            addFooter(document);
            document.add(getLine());
            addSignature(document);
            document.close();
        } catch (Exception ex) {
            Console.showError("Error in writing pdf.", this.getClass());
            Console.write(ex);
        }
    }

    LineSeparator getLine() {
        // Add line to document
        LineSeparator line = new LineSeparator();
        line.setLineColor(BaseColor.BLACK);
        line.setLineWidth(1f);
        line.setPercentage(80f);
        return line;
    }

    PdfPTable headerTable;

    private void addRowToTable(String column1, String column2, String column3, String column4) {
        headerTable.addCell(getTextField(column1));
        headerTable.addCell(getTextField(column2));
        headerTable.addCell(getTextField(column3));
        headerTable.addCell(getTextField(column4));
    }

    private void addInvoiceHeader(Document document)
            throws DocumentException, Exception {

        Paragraph HeaderPg = new Paragraph();

        headerTable = new PdfPTable(4);
        headerTable.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
        headerTable.setWidthPercentage(100);

        headerTable.setSpacingBefore(1);
        headerTable.setSpacingAfter(1);
        headerTable.setWidths(new int[]{35, 50, 35, 50});
        addRowToTable("Company :", "BLUEB ENTERPRISES", "Store :", this.STORE_NAME.getText());
        addRowToTable("NTN# :", "1223564-4", "STRN# :", "32-77-8761-393-89 BB");
        addRowToTable("Invoice# :", this.SALE_INVOICE_NUM.getText(), "Date :", this.SALE_INVOICE_DATE.getText());
        addRowToTable("Customer Name :", this.CUSTOMER_NAME.getText(), "Mobile :", this.MOBILE_NUMBER.getText());
        addRowToTable("GST % :", this.GST_PERCENTAGE.getText(), "GST Amount :", this.GST_AMOUNT.getText());
        addRowToTable("Discount Amount :", this.DISCOUNT_AMOUNT.getText(), "POS Service charges :", this.POS_CHARGES.getText());
        addRowToTable("Value (Excl.Tax) :", this.SUB_TOTAL.getText(), "Total Amount :", this.TOTAL_AMOUNT.getText());

        HeaderPg.add(headerTable);
        document.add(HeaderPg);
    }

    private void addRowToLineTable(String column1, String column2, String column3, String column4) {
        linePdfTable.addCell(getTextField(column1));
        linePdfTable.addCell(getTextField(column2));
        linePdfTable.addCell(getTextField(column3));
        linePdfTable.addCell(getTextField(column4));
    }

    PdfPTable linePdfTable;

    private void addInvoiceLines(Document document) throws DocumentException {

        linePdfTable = new PdfPTable(4);
        linePdfTable.setWidthPercentage(100);
        linePdfTable.setSpacingBefore(1);
        linePdfTable.setSpacingAfter(1);
        linePdfTable.setWidths(new int[]{50, 30, 30, 30});

        PdfPCell c1 = new PdfPCell(getTextField("Description"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        linePdfTable.addCell(c1);

        c1 = new PdfPCell(getTextField("Price"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        linePdfTable.addCell(c1);

        c1 = new PdfPCell(getTextField("Quantity"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        linePdfTable.addCell(c1);

        c1 = new PdfPCell(getTextField("Total"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        linePdfTable.addCell(c1);

        linePdfTable.setHeaderRows(1);

        //addRowToLineTable
        int rowCount = saleModel.getRowCount();

        for (int row = 0; row < rowCount; row++) {

            String ItemBarcode = saleModel.getValueAt(row, 0).toString();
            String sku = saleModel.getValueAt(row, 1).toString();
            String name = saleModel.getValueAt(row, 2).toString();
            String priceInclGst = saleModel.getValueAt(row, 3).toString();
            String quantity = saleModel.getValueAt(row, 5).toString();
            String totalAmount = saleModel.getValueAt(row, 11).toString();

            addRowToLineTable(ItemBarcode + " /" + sku + " /" + name, priceInclGst, quantity, totalAmount);
        }
        addRowToLineTable("Total : ", " ", this.Total_Quantity_of_Item.getText(), this.TOTAL_AMOUNT.getText());

        document.add(linePdfTable);
    }

    void addFooter(Document document) throws BadElementException, DocumentException, IOException {
        Paragraph TermsPg = new Paragraph();

        PdfPTable FooterTable = new PdfPTable(2);
        FooterTable.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
        FooterTable.setWidthPercentage(100);
        FooterTable.setSpacingBefore(1);
        FooterTable.setSpacingAfter(1);
        FooterTable.setWidths(new int[]{40, 40});

        PdfPTable TermsTable = new PdfPTable(1);
        TermsTable.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
        TermsTable.addCell(getTextField("Terms & conditions will apply."));
        TermsTable.addCell(getTextField("No Exchange & Refund"));
        TermsTable.addCell(getTextField("1. After 08:00 pm"));
        TermsTable.addCell(getTextField("2. Without Reciept/Tag"));
        TermsTable.addCell(getTextField("3. Without Reciept/Tag"));
        TermsTable.addCell(getTextField("4. After 3 days of Reciept."));
        TermsTable.addCell(getTextField("5. after shrink or without standard cutting."));
        TermsTable.addCell(getTextField("6. Item purchased In sale discount."));

        FooterTable.addCell(TermsTable);

        PdfPTable FBRTable = new PdfPTable(1);
        FBRTable.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
        FBRTable.addCell(getTextField("FBR Invoice#"));
        FBRTable.addCell(getTextField(this.SALE_INVOICE_NUM.getText()));

        BarcodeQRCode qrcode = new BarcodeQRCode(this.FBR_INVOICE_NUM.getText(), 10, 10, null);
        Image image = qrcode.getImage();

        PdfPCell pc = new PdfPCell(image);
        pc.setBorder(PdfPCell.NO_BORDER);
        //pc.setFixedHeight(100);
        FBRTable.addCell(pc);
        FBRTable.addCell(getTextField("Verify this invoice through FBR TaxAsaan MobileApp or SMS at 9966 and win Bxciting prizes in draw."));

        File file = new File(AppDataUtils.getConfigPath() + "FBR.png");
        image = convert(ImageIO.read(file));
        pc = new PdfPCell(image);
        pc.setBorder(PdfPCell.NO_BORDER);
        pc.setFixedHeight(30);

        FBRTable.addCell(pc);

        FooterTable.addCell(FBRTable);

        document.add(FooterTable);

    }

    /*   void addSignature(Document document) throws DocumentException {
        Paragraph ph = new Paragraph();
        ph.add(new Paragraph("Developed by: oradigitals.com | 0335-5546497", new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL)));
        ph.setAlignment(Element.ALIGN_MIDDLE );
        document.add(ph);
    }
     */
    void addSignature(Document document) throws DocumentException {
        Paragraph ph = new Paragraph();
        ph.add(new Paragraph("Developed by: oradigitals.com | 0335-5546497", new Font(Font.FontFamily.TIMES_ROMAN, 6, Font.NORMAL)));
        PdfPCell cell = new PdfPCell(ph);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cell.setBorder(PdfPCell.NO_BORDER);
        PdfPTable table = new PdfPTable(1);
        
        table.setWidthPercentage(100);
        table.addCell(cell);
        document.add(table);
    }

    public Image convert(BufferedImage bufferedImage) throws IOException, BadElementException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        javax.imageio.ImageIO.write(bufferedImage, "png", baos);
        baos.flush();
        byte[] imageBytes = baos.toByteArray();
        baos.close();
        return Image.getInstance(imageBytes);
    }

    // Utility method to convert millimeters to points
    private float mmToPoints(float mm) {
        return mm * 2.835f;
    }

    public void openPdfInPanel() throws IOException {

        JPanel panel = new JPanel();
        File pdfFile = new File(getReportName());
        if (pdfFile.exists()) {
            PDDocument document = PDDocument.load(pdfFile);
            PDFRenderer renderer = new PDFRenderer(document);
            java.awt.Image image = renderer.renderImage(0); // Render first page only
            panel.setDoubleBuffered(true);
            panel.setOpaque(true);
            panel.setAutoscrolls(true);
            panel.add(new JLabel(new ImageIcon(image)));
            panel.revalidate();
            document.close();
            JFrame j = new JFrame();
            j.add(panel);
            j.setVisible(true);
            j.setSize(600, 800);
        } else {
            System.out.println("PDF file does not exist");
        }
    }

    String getReportName() {
        return AppDataUtils.getReportTmpPath() + "\\" + this.SALE_INVOICE_NUM.getText() + ".pdf";
    }

    Paragraph getTextField(String p) {
        Paragraph tf = new Paragraph(p, LableFont);
        tf.setAlignment(Element.ALIGN_LEFT);
        return tf;
    }

    Paragraph getNumberField(String p) {
        Paragraph tf = new Paragraph(p, ValueFont);
        tf.setAlignment(Element.ALIGN_RIGHT);
        return tf;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AMOUNT_RECEIVED;
    private javax.swing.JTextField AMOUNT_REMAINING;
    private javax.swing.JButton BillPreview;
    private javax.swing.JTextField CUSTOMER_NAME;
    private javax.swing.JComboBox<String> CUSTOMER_TYPE;
    private javax.swing.JTextField DISCOUNT_AMOUNT;
    private javax.swing.JTextField FBR_INVOICE_NUM;
    private javax.swing.JTextField GST_AMOUNT;
    private javax.swing.JTextField GST_PERCENTAGE;
    private javax.swing.JTextField MOBILE_NUMBER;
    private javax.swing.JTextField POS_CHARGES;
    private javax.swing.JButton Print;
    private javax.swing.JTextField SALE_INVOICE_DATE;
    private javax.swing.JTextField SALE_INVOICE_NUM;
    private javax.swing.JTextField STORE_NAME;
    private javax.swing.JTextField SUB_TOTAL;
    private javax.swing.JButton SaveBtn;
    private javax.swing.JTextField TOTAL_AMOUNT;
    private javax.swing.JTextField TRANSACTION_REFERANCE;
    private javax.swing.JComboBox<String> TRANSACTION_TYPE;
    private javax.swing.JTextField Total_Number_Of_Item;
    private javax.swing.JTextField Total_Quantity_of_Item;
    private javax.swing.JButton addItems;
    public javax.swing.JTextField barcode;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
