package Main;

import FND.Global;
import Shopify.Courier.BlueX;
import Shopify.Courier.DHL;
import Shopify.Courier.Express;
import Shopify.Courier.InstaWorld;
import Shopify.Courier.Jomo;
import Shopify.Courier.PostEx;
import Shopify.DB.Candela;
import Shopify.DB.DB;
import Shopify.Shopify;
import Shopify.Courier.SwyftThread;
import Shopify.Courier.TCS;
import Shopify.Courier.TPL;
import Shopify.Courier.Trax;
import Shopify.Courier.callCourier;
import Shopify.DB.CandelaEconnect.Econnect;
import Shopify.Log.Console;
import Shopify.Update;
import java.awt.Color;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.output.OutputException;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 *
 * @author M.Faisal1521
 */
public class InventoryMainPage extends javax.swing.JFrame implements Runnable {

    public boolean isAppStop = true;
    public static boolean isLogStop = true;
    DB db = null;

    /**
     * Creates new form FilePrinting
     */
    public InventoryMainPage() {
        initComponents();
        //Start Logging
        Console.init();
        //Standard
        SystemInfo.append(getSystemInfo());
        db = new DB();

        ///
        //isLogStop = false;
    } //initComponents

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        ChildPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SystemInfo = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jpanel1 = new javax.swing.JScrollPane();
        ConsoleText = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        StartButton = new javax.swing.JButton();
        FetchCities = new javax.swing.JButton();
        Logging = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shopify  (Server)");
        setLocation(new java.awt.Point(50, 5));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        MainPanel.setName(" File Printing"); // NOI18N

        ChildPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("System Info :");
        ChildPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, -1, -1));

        jScrollPane3.setEnabled(false);

        SystemInfo.setBackground(new java.awt.Color(204, 204, 204));
        SystemInfo.setColumns(20);
        SystemInfo.setLineWrap(true);
        SystemInfo.setRows(5);
        jScrollPane3.setViewportView(SystemInfo);

        ChildPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 20, 370, 40));

        jLabel3.setText("Console:");
        ChildPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        ConsoleText.setBackground(new java.awt.Color(0, 0, 0));
        ConsoleText.setColumns(20);
        ConsoleText.setForeground(java.awt.SystemColor.controlHighlight);
        ConsoleText.setRows(5);
        jpanel1.setViewportView(ConsoleText);

        ChildPanel.add(jpanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1010, 460));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Server ");
        ChildPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(ChildPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1041, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator2)
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(511, Short.MAX_VALUE))
            .addComponent(ChildPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        StartButton.setBackground(new java.awt.Color(102, 255, 102));
        StartButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        StartButton.setText("Start");
        StartButton.setContentAreaFilled(false);
        StartButton.setFocusPainted(false);
        StartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                StartButtonMouseEntered(evt);
            }
        });

        FetchCities.setFont(StartButton.getFont());
        FetchCities.setText("Fetch Cities");
        FetchCities.setToolTipText("");
        FetchCities.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FetchCitiesMouseClicked(evt);
            }
        });

        Logging.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Logging.setToolTipText("");
        Logging.setContentAreaFilled(false);
        Logging.setFocusPainted(false);
        Logging.setFocusable(false);
        Logging.setLabel("Show Log");
        Logging.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoggingMouseClicked(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FetchCities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Logging, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(49, 49, 49)))
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1031, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton1)
                .addGap(42, 42, 42)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FetchCities, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Logging, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {FetchCities, StartButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

    }//GEN-LAST:event_formMouseDragged

    private void StartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartButtonMouseClicked
        // TODO add your handling code here:

        if (isAppStop) {
            isAppStop = false;
            StartButton.setText("Stop");
            StartButton.setBackground(Color.red);
            StartButton.setForeground(Color.red);
        } else {
            isAppStop = true;
            StartButton.setText("Start");
            StartButton.setBackground(Color.green);
            StartButton.setForeground(Color.BLACK);
            return;
        }

         Thread customThread;

        customThread = new Thread(this);
        customThread.setName("FETCH_NEW");
        customThread.start();

        // MISSING_ORDERS
        customThread = new Thread(this);
        customThread.setName("MISSING_ORDERS");
        customThread.start();

        //Synchronization between ERP & Shopify
        customThread = new Thread(this);
        customThread.setName("SHOPIFY_LIVE_WITH_ERP");
        customThread.start();

        //REFRESH_DATA
        customThread = new Thread(this);
        customThread.setName("REFRESH_DATA");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("STR");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("SMS");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("BARCODE");
        customThread.start();
        
        customThread = new Thread(this);
        customThread.setName("CONNECT_TO_SQLSERVER");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("UPDATE_ORDER_CANDELA");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("CANCEL_ORDER");
        customThread.start();        

        //MarkFullfillmentEstore1
        customThread = new Thread(this);
        customThread.setName("MarkFullfillmentEstore1");
        customThread.start();
        
     
        
        customThread = new Thread(this);
        customThread.setName("POSTEX & DHL");
        customThread.start();
        
        customThread = new Thread(this);
        customThread.setName("TPL & INSTA");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("SWYFT & JOMO");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("CALLCOURIER");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("TCS");
        customThread.start();

        customThread = new Thread(this);
        customThread.setName("TRAX");
        customThread.start();   
       
           
      
     
    
      
   
       
        /****** below threads are disabled on request of ECOMM 8-march-22
       
       
       //MarkFullfillmentEstore2
        customThread = new Thread(this);
        customThread.setName("MarkFullfillmentEstore2");
        customThread.start();
        
        customThread = new Thread(this);
        customThread.setName("EXPRESS");
        customThread.start(); 
      
        customThread = new Thread(this);
        customThread.setName("BLUEX");
        customThread.start(); */
         
        /****** below threads will be enable only in sale 
        
        customThread = new Thread(this);
        customThread.setName("PartialTCS");
        customThread.start();
         
       
        customThread = new Thread(this);
        customThread.setName("MarkFullfillmentEstore2");
       
        customThread.start(); 
        customThread = new Thread(this);
        customThread.setName("UPDATE_TBLSALES");
        customThread.start();  */
  
      

    }//GEN-LAST:event_StartButtonMouseClicked

    private void FetchCitiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FetchCitiesMouseClicked
   //  DB db = new DB();
        // TODO add your handling code here:
        Thread customThread;
        customThread = new Thread(this);
        customThread.setName("CITY");
        customThread.start();

    }//GEN-LAST:event_FetchCitiesMouseClicked

    private void LoggingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoggingMouseClicked
        // TODO add your handling code here:
        if (isLogStop) {
            isLogStop = false;
            this.Logging.setText("Hide Log");
            Logging.setBackground(Color.red);
            Logging.setForeground(Color.red);
        } else {
            isLogStop = true;
            Logging.setText("Show Log");
            Logging.setBackground(Color.green);
            Logging.setForeground(Color.BLACK);
            this.getConsoleText().setText(null);
        }


    }//GEN-LAST:event_LoggingMouseClicked

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        Candela cn = new Candela(db);
        cn.TransferStoreDataToOracle();
    }//GEN-LAST:event_jButton1MousePressed

    private void StartButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_StartButtonMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryMainPage().setVisible(true);
            }
        });

    }

    public String getSystemInfo() {
        String G_SystemUserName = null;
        //CustomCode for Details
        try {
            InetAddress ip = InetAddress.getLocalHost();
            if (ip.getHostAddress() != null) {
                G_SystemUserName = System.getProperty("user.name") + " / " + System.getProperty("os.name") + " / " + ip.getHostAddress();
            }
        } catch (UnknownHostException ex) {

            Logger.getLogger(InventoryMainPage.class.getName()).log(Level.SEVERE, null, ex);
            Console.write("Error at getSystemInfo / " + ex.getMessage());
        }

        return G_SystemUserName;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChildPanel;
    private static javax.swing.JTextArea ConsoleText;
    private javax.swing.JButton FetchCities;
    private javax.swing.JButton Logging;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton StartButton;
    private javax.swing.JTextArea SystemInfo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JScrollPane jpanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        ///Thread Handling
        try {

            Console.write("Thread Start :  " + Thread.currentThread().getName());

            if (Thread.currentThread().getName().equals("FETCH_NEW")) {
                fetchNew();
            }

            if (Thread.currentThread().getName().equals("MISSING_ORDERS")) {
                MissingOrders();
            }

            //SHOPIFY_LIVE_WITH_ERP live Thread With Shopify
            // 1 mint delay in Ghraph SQL
            // Per Transaction Delay will be 5 sec ..
            // this duration can be increase by Changing in View mf_shopify_Dates_V
            if (Thread.currentThread().getName().equals("SHOPIFY_LIVE_WITH_ERP")) {
                PostUpdatedRecord();
            }

            if (Thread.currentThread().getName().equals("CITY")) {
                this.Fetchcity();
            }

            //BARCODE
            if (Thread.currentThread().getName().equals("BARCODE")) {
                this.Barcode();
            }

            //MarkFullfillment
            if (Thread.currentThread().getName().equals("MarkFullfillmentEstore1")) {
                this.MarkFullfillmentEstore1();
            }

            //MarkPartialFullfillment
            if (Thread.currentThread().getName().equals("MarkFullfillmentEstore2")) {
                this.MarkFullfillmentEstore2();
            }

            //tcs 
            if (Thread.currentThread().getName().equals("TCS")) {
                this.TCSThread();
            }

            //PartialTCS
            if (Thread.currentThread().getName().equals("PartialTCS")) {
                this.PartialTCS();
            }

            //SWYFT
            if (Thread.currentThread().getName().equals("SWYFT & JOMO")) {
                //
                this.swyftThread();
            }

            //TPL
            if (Thread.currentThread().getName().equals("TPL & INSTA")) {
                //
                this.TPLThread();
            }

            //CallCourier
            if (Thread.currentThread().getName().equals("CALLCOURIER")) {
                //
                this.CallCourierThread();
            }

            //STR
            if (Thread.currentThread().getName().equals("STR")) {
                this.STR();
            }

            //STR
            if (Thread.currentThread().getName().equals("TRAX")) {
                this.Trax();
            }

            //EXPRESS
            if (Thread.currentThread().getName().equals("EXPRESS")) {
                this.ExpressThread();
            }

            //REFRESH DATA
            if (Thread.currentThread().getName().equals("CANDELA_SALE")) {
                //
                this.StartCandelaSale();
            }

            if (Thread.currentThread().getName().equals("SMS")) {
                //
                this.SMS();
            }

            if (Thread.currentThread().getName().equals("BLUEX")) {
                BlueX();
            }

            if (Thread.currentThread().getName().equals("POSTEX & DHL")) {
                POSTEX_DHL();
            }

            if (Thread.currentThread().getName().equals("CONNECT_TO_SQLSERVER")) {
                this.connectToSQLServer();
            }

            if (Thread.currentThread().getName().equals("SHOPIFY_TAGS_UPDATE")) {
                this.shopifyTagsUpdate();
            }

            ////  
            if (Thread.currentThread().getName().equals("REFRESH_DATA")) {
                this.REFRESH_DATA();
            }

            if (Thread.currentThread().getName().equals("UPDATE_TBLSALES")) {
                this.updateTblSales();
            }

            if (Thread.currentThread().getName().equals("UPDATE_ORDER_CANDELA")) {
                this.updateOrderCandela();
            }
           

           if (Thread.currentThread().getName().equals("CANCEL_ORDER")) {
                this.cancelOrderThread();
            }

        } catch (Exception e) {
            Console.write("Error / " + e.getMessage());
        }
    }

    public void fetchNew() {
        CallableStatement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(500); // milisec
                // Console.allLog.info("Fetch Process Start");
                //Get Connection
                stmt = dbConnection.getDBConnection().
                        prepareCall("begin :result := App_UTL.getOrderMax(299); end;");
                stmt.registerOutParameter(1, Types.VARCHAR);
                stmt.execute();

                Shopify Shp = new Shopify(dbConnection, Global.SHOPIFY_SRL_IN_HOUSE_KEY);

                if (stmt.getString(1) != null) {

                    Shp.FetchAllOrders(
                            "&order=created_at+asc"
                            //+"&created_at_min="
                            + "&limit=" + 50
                            + "&direction=next"
                            + "&last_id=" + stmt.getString(1), Global.NewOrders
                    );
                } else {
                    Shp.FetchAllOrders(
                            "&order=created_at+asc"
                            //+"&created_at_min="
                            + "&limit=50"
                            + "&direction=next"
                            + "&last_id=" + 10, Global.NewOrders
                    );

                }

                //  Console.allLog.info("Last Order Id : " + stmt.getString(1));
                stmt.close();

                /// Refresh Data ForceFully
            } catch (InterruptedException | SQLException | NullPointerException e) {
                Console.write("Error : fetchNew /" + e.toString());
                // Console.allLog.info(e.toString());
            }
        }
    }

    //Missing Orders
    public void MissingOrders() {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // sec
                // Console.allLog.info("Fetch Process Start");
                //Get Connection
                stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = stmt.executeQuery("select ORDER_NAME from SRL_Shopify_missing_orders where Organization_id= 299");

                ///getRowCount
                for (int i = 1; i <= getRowCount(rs); i++) {
                    rs.absolute(i); //MOVE TO ROW
                    Shopify Shp = new Shopify(dbConnection, Global.SHOPIFY_SRL_IN_HOUSE_KEY);
                    Shp.FetchAllOrders("name=" + rs.getString("ORDER_NAME"), Global.NewOrders);

                    /// Clear Missing Order Log
                    //
                    CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin   app_db_utl.clear_missing_order(p_order_name => :p_order_name,p_organization_id => 299); end;");
                    dCall.setString(1, rs.getString("ORDER_NAME"));
                    dCall.execute();
                    dCall.close();
                }
                stmt.close();

                /// Refresh Data ForceFully
            } catch (InterruptedException | SQLException | NullPointerException e) {
                Console.write("Error : MissingOrders / " + e.toString());
                // Console.allLog.info(e.toString());
            }

        }

    }

    /**/
    public void PostUpdatedRecord() throws InterruptedException {
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            try {

                //  Console.allLog.info("Thread Started");
                //  Console.allLog.info("Post Thread Started");
                Thread.sleep(1000); // sec
                //Get Connection
                Statement OracleQuery = (Statement) dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet l_DateV = (ResultSet) OracleQuery.executeQuery("select UPDATEAT ,  CREATEDAT from  mf_shopify_Dates_V where ORGANIZATION_ID = 299");
                l_DateV.absolute(1);
                String l_updateDate = l_DateV.getString("UPDATEAT");
                OracleQuery.close();
                l_DateV.close();
                Shopify Shp = new Shopify(dbConnection, Global.SHOPIFY_SRL_IN_HOUSE_KEY);

                Shp.FetchAllOrders(
                        "&order=updated_at+asc"
                        + "&limit=50"
                        + "&direction=next"
                        + "&updated_at_min=" + l_updateDate //  + "&created_at_max="+l_DateV.getString("CREATEDAT")
                        ,
                         Global.Synchronize_ERP
                );

            } catch (NullPointerException | SQLException e) {
                Console.write("Synchronization Error : " + e.toString());
            }
        }
    }

    public void reporting() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        //Report
        try {

            stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stmt.executeQuery("select log_id ,ACTION_TYPE ,order_id , city_name , barcode from (select * from mf_shopify_order_log  where ORGANIZATION_ID = 299 and status is null  and action_type ='UPDATE_CITY' ORDER BY priority asc, REQUEST_DATE ASC) where rownum<100 ");
            Shopify sp = new Shopify(dbConnection, Global.SHOPIFY_SRL_IN_HOUSE_KEY);

            ///getRowCount
            for (int i = 1; i <= getRowCount(rs); i++) {
                rs.absolute(i); //MOVE TO ROW

                // UPDATE_CITY
                if (rs.getString("ACTION_TYPE").equals("UPDATE_CITY")) {
                    try {
                        sp.SetOrderCity(rs.getString("order_id"), rs.getString("city_name"));
                        Console.write("City updated " + rs.getString("order_id") + "  " + rs.getString("city_name"));
                    } catch (Exception ex) {
                        Console.write("Error in Transaction of " + rs.getString("order_id") + "  " + rs.getString("city_name"));
                    }
                }

                //Complete Log Status
                CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Set_log_Completed(pLog_id => :pLog_id); end;");
                dCall.setString(1, rs.getString("log_id"));
                dCall.execute();
                dCall.close();

            }
            stmt.close();

        } catch (NullPointerException | SQLException e) {
            Console.write("Reporting Error " + e);
           
        }
    }

    ///Start MarkFullfillment   /////
    public void MarkFullfillmentEstore1() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(500);

            // Console.show("MarkFullfillment process start."+this.getDate());
            //Report
            try {
                Shopify sp = new Shopify(dbConnection, Global.SHOPIFY_SRL_FULFILLMENT_KEY);
                //markFullFilments
                sp.CreateSingleOrderFullfilment(1);
                sp.CreateMixOrderFullfilment(1);

            } catch (Exception e) {
                Console.write("MarkFullfillment Error " + e.getMessage());
                Console.show("MarkFullfillment Error " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
///end MarkFullfillment

    //start MarkPartialFullfillment
    public void MarkFullfillmentEstore2() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(500);
            try {
                Shopify sp = new Shopify(dbConnection, Global.SHOPIFY_SRL_FULFILLMENT_KEY);
                //MarkPartialFullfillment

                sp.CreateSingleOrderFullfilment(2);
                sp.CreateMixOrderFullfilment(2);
            } catch (Exception e) {
                Console.write("MarkPartialFullfillment Error " + e.getMessage());
                Console.show("MarkPartialFullfillment Error " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    //TCS Thread  PartialTCS

    public void TCSThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                TCS tcs = new TCS(db);
                tcs.generateCN(1);
             //   tcs.generateCN(2);
            } catch (Exception e) {
                Console.write("Error : TCSThread / " + e.toString());
            }
        }
    }

  
    public void DHLThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                DHL dhl = new DHL(db);
                dhl.generateCN();
            } catch (Exception ex) {
                Console.write("Error : DHLThread / " + ex.toString());
            }
        }
    }
    
    
    public void cancelOrderThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                
                //cancel order from shopify
                Update tu = new Update(db);
                tu.cancelOrder();
                
                //cancel order from econnect
                Econnect ec = new Econnect(db);
                ec.Cancel_order();
                } catch (Exception ex) {
                Console.write("Error : cancelOrderThread / " + ex.toString());
            }
        }
    }
    
    
    

    public void PartialTCS() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                TCS tcs = new TCS(db);
                tcs.generateCN(2);
            } catch (Exception e) {
                Console.write("Error : PartialTCSThread / " + e.toString());
            }
        }
    }

    //Trax Thread
    public void Trax() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                Trax Trax = new Trax(db);
                Trax.generateCN(1);
            //    Trax.generateCN(2);
            } catch (Exception e) {
                Console.write("Error : Trax /" + e.toString());
            }
        }
    }

    //swyft Thread
    public void swyftThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                SwyftThread swyft = new SwyftThread(db);
                swyft.generateCN();
                
               Jomo jomo = new Jomo(db);
               jomo.generateCN(1);
                
                
            } catch (Exception e) {
                Console.write("Error : swyft&JomoThread / " + e.toString());
            }
        }
    }
    
   
    

    //tpl Thread
    public void TPLThread() {
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                
                TPL tpl = new TPL(dbConnection);
                tpl.generateCN();
                
                InstaWorld insta = new InstaWorld(dbConnection);
                insta.generateCN(1);
                
            } catch (Exception e) {
                Console.write("Error : TPLThread / " + e.toString());
               
            }
        }
    }

    //CallCourier Thread
    public void CallCourierThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec

                ///CN Generation
                callCourier lcallCourier = new callCourier(db);
                lcallCourier.generateCN();

            } catch (Exception e) {
                Console.write("Error : CallCourierThread / " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    //CallCourier Thread
    public void ExpressThread() {
        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec

                ///CN Generation
                Express lExpress = new Express(db);
                lExpress.generateCN();

            } catch (Exception e) {
                Console.write("Error : ExpressThread / " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    private int getRowCount(ResultSet resultSet) {
        if (resultSet == null) {
            return 0;
        }

        try {
            resultSet.last();
            return resultSet.getRow();
        } catch (SQLException exp) {
            exp.printStackTrace();
        } finally {
            try {
                resultSet.beforeFirst();
            } catch (SQLException exp) {
                exp.printStackTrace();
            }
        }

        return 0;
    }

    
    
     public void fetchSwyftCities() {

     DB db = new DB();

     try {

        SwyftThread swyft = new SwyftThread(db);
        swyft.fetchNewCities();
     } catch (Exception ex) {
        Console.write("Error : fetchSwyftCities / " + ex.getMessage());
     }
  }
    
    
    public void Fetchcity() throws InterruptedException {

        /* allCities[] l_allCities = null;

     DB dbConnection = new DB();
     /*
     //TCS Cities
     Console.write("TCS City Processing Start");
     TCS tcs = new TCS(console, dbConnection);

     l_allCities = (allCities[]) tcs.FetchAllTCScities();

     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
         try {
             //Complete Log Status
             CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
             dCall.setString(1, l_allCities[ldx].CompanyName);
             dCall.setString(2, l_allCities[ldx].CityId);
             dCall.setString(3, l_allCities[ldx].CityName);
             dCall.setString(4, l_allCities[ldx].CityCode);
             dCall.setString(5, l_allCities[ldx].Area);
             dCall.execute();
             dCall.close();
             Console.write("City name fetched: " + l_allCities[ldx].CityName);
         } catch (Exception ex) {
             Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
         }
     }

     //Call courier Cities
     Console.write("Call courier City Processing Start");
     callCourier lcallCourier = new callCourier(console, dbConnection);

     l_allCities = (allCities[]) lcallCourier.FetchAllCallCourierCities();

     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
         try {
             //Complete Log Status
             CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
             dCall.setString(1, l_allCities[ldx].CompanyName);
             dCall.setString(2, l_allCities[ldx].CityId);
             dCall.setString(3, l_allCities[ldx].CityName);
             dCall.setString(4, l_allCities[ldx].CityCode);
             dCall.setString(5, l_allCities[ldx].Area);
             dCall.execute();
             dCall.close();
             Console.write("City name fetched: " + l_allCities[ldx].CityName);
         } catch (Exception ex) {
             Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
         }
     }

     //Trax Cities
     Console.write("Trax courier City Processing Start");
     Trax lTrax = new Trax(console, dbConnection);

     l_allCities = (allCities[]) lTrax.FetchAllTraxCities();

     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
         try {
             //Complete Log Status
             CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
             dCall.setString(1, l_allCities[ldx].CompanyName);
             dCall.setString(2, l_allCities[ldx].CityId);
             dCall.setString(3, l_allCities[ldx].CityName);
             dCall.setString(4, Global.nvl(l_allCities[ldx].CityCode));
             dCall.setString(5, Global.nvl(l_allCities[ldx].Area));
             dCall.execute();
             dCall.close();
             Console.write("City name fetched: " + l_allCities[ldx].CityName);
         } catch (Exception ex) {
             Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
         }
     }

     //Express Cities
     Console.write("Express City Processing Start");
     Express lexpress = new Express(console, dbConnection);

     l_allCities = (allCities[]) lexpress.FetchAllExpressCities();

     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
         try {
             //Complete Log Status
             CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
             dCall.setString(1, l_allCities[ldx].CompanyName);
             dCall.setString(2, l_allCities[ldx].CityId);
             dCall.setString(3, l_allCities[ldx].CityName);
             dCall.setString(4, Global.nvl(l_allCities[ldx].CityCode));
             dCall.setString(5, Global.nvl(l_allCities[ldx].Area));
             dCall.execute();
             dCall.close();

             Console.write("City name fetched: " + l_allCities[ldx].CityName);
         } catch (Exception ex) {
             Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
         }
     }

         */
 /*
     //Swyft Cities
     Console.write("Swyft City Processing Start");
     SwyftThread lSwyft = new SwyftThread(console, dbConnection);

     l_allCities = (allCities[]) lSwyft.FetchAllCallCourierCities();

     Console.write("Swyft City Processing After Data Set");
     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
        try {
           //Complete Log Status
           CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
           dCall.setString(1, l_allCities[ldx].CompanyName);
           dCall.setString(2, l_allCities[ldx].CityId);
           dCall.setString(3, l_allCities[ldx].CityName);
           dCall.setString(4, Global.nvl(l_allCities[ldx].CityCode));
           dCall.setString(5, Global.nvl(l_allCities[ldx].Area));
           dCall.execute();
           dCall.close();

           Console.write("City name fetched: " + l_allCities[ldx].CityName);
        } catch (Exception ex) {
           Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
        }
     }
     /
     
     
      //Postex Cities
     Console.write("PostEx City Processing Start");
     PostEx  lPostEx = new PostEx();

     l_allCities = (allCities[]) lPostEx.FetchAllCities();

     Console.write("PostEx City Processing After Data Set");
     //Insert into Table
     for (int ldx = 0; ldx<l_allCities.length; ldx++) {
        try {
           //Complete Log Status
           CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Post_City_Name(p_Company_Name => :p_Company_Name,p_city_ID => :p_city_ID,p_city_Name => :p_city_Name,p_city_Code => :p_city_Code,p_area => :p_area); end;");
           dCall.setString(1, l_allCities[ldx].CompanyName);
           dCall.setString(2, l_allCities[ldx].CityId);
           dCall.setString(3, l_allCities[ldx].CityName);
           dCall.setString(4, Global.nvl(l_allCities[ldx].CityCode));
           dCall.setString(5, Global.nvl(l_allCities[ldx].Area));
           dCall.execute();
           dCall.close();

           Console.write("City name fetched: " + l_allCities[ldx].CityName);
        } catch (Exception ex) {
           Console.write("Error while run App_UTL.Post_City_Name " + ex.getMessage());
        }
     }
         */
    } // End Fetchcity

    //    private int getSQLDBSeq() throws SQLException
    //    {
    //            Statement SqlQuery = (Statement) db.getSQLConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    //            ResultSet lResultSet =SqlQuery.executeQuery("select mf_shopify_SQLDB_SEQ.nextval DBSEQ from dual ");
    //            lResultSet.absolute(0);
    //            return lResultSet.getInt("DBSEQ");
    //    }
    ///Insert Record in Oracle
    public boolean isRecordExists(String pOrderid, String ProductCode) //throws SQLException
    {
        try //throws SQLException
        {
            Statement SqlQuery = (Statement) db.getCandelaConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet lResultSet = SqlQuery.executeQuery("SELECT OrderId FROM [CANDELAstml].[dbo].[tblWebstoreSale] where [OrderId] ='" + pOrderid + "' and ProductCode='" + ProductCode + "'");

            if (getRowCount(lResultSet) > 0) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            Console.write("InventoryMainPage/isRecordExists error " + ex.getMessage());
            return true;
        }

    }

    ///check Record in SQLSerer
    public void PostTransactionInOracle(String pOrderid, String pProductCode) {
        try {
            //Post Transaction in Oracle
            CallableStatement dCall = db.getDBConnection().prepareCall("begin App_UTL.post_SQL_transaction(order_id => :order_id,pProductCode=>:pProductCode,p_organization_id => 299); end;");
            dCall.setString(1, pOrderid);
            dCall.setString(2, pProductCode);
            dCall.execute();
            dCall.close();
        } catch (SQLException ex) {
            Console.write("InventoryMainPage/PostTransactionInOracle error " + ex.getMessage());
        }

    }

    ////
    //STR Thread
    public void STR() {
        DB db = new DB();
        //Candela class
        Candela candela = new Candela(db);
        while (!this.isAppStop) {
            try {
                candela.TransferStrDataToOracle();
                candela.TransferProductDataToOracle();
                candela.transferSaleCandelaToOra();
                Thread.sleep(5 * 60 * 1000);
            } catch (Exception e) {
                Console.write("Error : STR / " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    //SQLSERVER METHOD  
    public void connectToSQLServer() throws InterruptedException {

        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(1000);
            Econnect EC = new Econnect(dbConnection);
            EC.Post_Order();
           

        } //while Loop
    } //SQL Server ENd

    //updateOrderCandela  
    public void updateOrderCandela() throws InterruptedException {

        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(1000);
            Econnect EC = new Econnect(dbConnection);
            EC.update_order();
            EC.updateTblSales();

        } //while Loop
    } //updateOrderCandela

    public void updateTblSales() throws InterruptedException, SQLException {

        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(1000);

            //   t.cancelOrder();
            Econnect EC = new Econnect(dbConnection);
            EC.updateTblSales();

        } //while Loop
    }

    public void shopifyTagsUpdate() {

        DB db = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000);
                Update tgu = new Update(db);
                int q = tgu.updateTags();

            } catch (Exception ex) {
                Console.write("Error : shopifyTagsUpdate / " + ex.toString());
            }
        }
    }

    public void exchangeRateUpdate() {

        DB db = new DB();
       
            try {
                Thread.sleep(1000);
                DHL dhl = new DHL(db);
                dhl.updateRates();

            } catch (Exception ex) {
                Console.write("Error : exchangeRateUpdate / " + ex.toString());
            }
        
    }

    ///Barcode Start
    public void Barcode() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(1000);

            //Console.allLog.info("Reporting process start.");
            //Report
            try {

                stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = stmt.executeQuery("select log_id ,ACTION_TYPE ,order_id , city_name , barcode from mf_shopify_order_log where organization_id = 299 and status is null and action_type ='BARCODE' ");

                ///getRowCount
                for (int i = 1; i <= getRowCount(rs); i++) {
                    rs.absolute(i); //MOVE TO ROW

                    // BARCODE
                    if (rs.getString(2).equals("BARCODE")) {
                        try {
                            Global.GenerateBarcode(rs.getString("order_id"), rs.getString("barcode"));
                            //  Console.write("Barcode generated for " + rs.getString("barcode") + " / " + rs.getString("order_id"));
                        } catch (BarcodeException | OutputException ex) {
                            Console.write(ex.getMessage() + " Error in Transaction of " + rs.getString("barcode") + " / " + rs.getString("order_id"));
                        }
                    }

                    //Complete Log Status
                    CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Set_log_Completed(pLog_id => :pLog_id); end;");
                    dCall.setString(1, rs.getString(1));
                    dCall.execute();
                    dCall.close();
                }
                stmt.close();

            } catch (NullPointerException | SQLException e) {
                Console.write("Reporting Error " + e.getMessage());
            }
        }
    }

    ///Barcode End
    //Refresh Data
    public void REFRESH_DATA() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(500);

            ///Update cities first
            this.reporting();

            //Report
            try {

                stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = stmt.executeQuery("select log_id ,ACTION_TYPE ,order_id , city_name , barcode , STR_NUMBER from (select * from mf_shopify_order_log  where ORGANIZATION_ID = 299 and status is null   and action_type  in ('REFRESH_DATA','STR_DATA','CANDELA_SALE','EXCHANGE_RATE_UPDATE') ORDER BY priority asc, REQUEST_DATE ASC) where rownum<100 ");

                ///getRowCount
                for (int i = 1; i <= getRowCount(rs); i++) {
                    rs.absolute(i); //MOVE TO ROW

                    // RefreshData
                    if (rs.getString("ACTION_TYPE").equals("REFRESH_DATA")) {
                        ///Query Order Records and proceed one by one.
                        Statement Dstmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                        ResultSet Drs = Dstmt.executeQuery("select h.ORDER_ID from mf_shopify_order_log lg , mf_shopify_order_header h where h.ORGANIZATION_ID= lg.ORGANIZATION_ID and h.ORGANIZATION_ID = 299 and ACTION_TYPE = 'REFRESH_DATA' AND log_id = " + rs.getString("log_id") + "and APP_UTL.GET_ORDER_NUMBER(ORDER_NAME) between FROM_ORDER and to_order ");

                        for (int D = 1; D <= getRowCount(Drs); D++) {
                            Drs.absolute(D); //MOVE TO ROW

                            // Console.show("Refresh Data Action Before shopify" +Drs.getString("ORDER_ID") +getDate() );
                            //Console.show("Start Debug");
                            Shopify sp = new Shopify(dbConnection, Global.SHOPIFY_SRL_IN_HOUSE_KEY);
                            sp.FetchSingleOrder(Drs.getString("ORDER_ID"), false);
                            // Console.show("Refresh Data Action after shopify" +Drs.getString("ORDER_ID") +getDate() );
                            // Console.write("Order id " + Drs.getString("ORDER_ID") + " is refreshed against log id " + rs.getString("log_id"));
                          
                        }
                        Dstmt.close();
                    }

                    // RefreshData
                    if (rs.getString("ACTION_TYPE").equals("STR_DATA")) {

                        //Candela class
                        Candela candela = new Candela(dbConnection);
                        try {
                            candela.TransferStrDataToOracle(rs.getString("STR_NUMBER"));
                        } catch (Exception e) {
                            Console.write("Error : STR_DATA ACTION " + e.toString());
                            //  Console.allLog.info(e.toString());
                        }

                    }

                    // CANDELA_SALE
                    if (rs.getString("ACTION_TYPE").equals("CANDELA_SALE")) {
                        Thread customThread;
                        customThread = new Thread(this);
                        customThread.setName("CANDELA_SALE");
                        customThread.start();
                    }

                    // Tags update
                    if (rs.getString("ACTION_TYPE").equals("SHOPIFY_TAGS_UPDATE")) {
                        Thread customThread;
                        customThread = new Thread(this);
                        customThread.setName("SHOPIFY_TAGS_UPDATE");
                        customThread.start();
                    }

                    if (rs.getString("ACTION_TYPE").equals("EXCHANGE_RATE_UPDATE")) {

                        this.exchangeRateUpdate();
                    }

                    //Complete Log Status
                    CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin App_UTL.Set_log_Completed(pLog_id => :pLog_id); end;");
                    dCall.setString(1, rs.getString("log_id"));
                    dCall.execute();
                    dCall.close();
                }
                stmt.close();

            } catch (NullPointerException | SQLException e) {
                Console.write("Reporting Error " + e);
                e.printStackTrace();
            }
        }
    }

    private void StartCandelaSale() {
        DB dbConnection = new DB();
        Candela candela = new Candela(dbConnection);
        try {
            candela.FetchSaleDataToOracle();
        } catch (Exception e) {
            Console.write("Error : Candela_Sale " + e.toString());
        }
    }

    private String getDate() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();
        return formatter.format(date);
    }

    /*//=========================================temp methods
  public void TEMP_REFRESH_DATA() throws InterruptedException {
      Statement stmt = null;
      DB dbConnection = new DB(this.console);
      while (!this.isAppStop) {
          //Report
          try {
              stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
              ResultSet rs = stmt.executeQuery("select order_id  \n"
                      + "from \n"
                      + "(select order_id\n"
                      + "from MF_SHOPIFY_SHIPPING_ADDRESS_V\n"
                      + "where customer_id is   null\n"
                      + "and ORGANIZATION_ID  = 299 \n"
                      + "order by order_id desc \n"
                      + ")\n"
                      + "where rownum< 100");
              Shopify sp = new Shopify(console, dbConnection);
              ///getRowCount
              for (int i = 1; i<= getRowCount(rs); i++) {
                  rs.absolute(i); //MOVE TO ROW
                  sp.TempOrder(rs.getString("order_id"));
              }
              rs.close();
          } catch (NullPointerException | SQLException e) {
              Console.write("Reporting Error " + e);
          }
      }
  }*/
    //=====================================================================
    private void SMS() throws InterruptedException {
        Statement stmt = null;
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            Thread.sleep(1000 * 60);
            //Report
            try {

                //Complete Log Status
                CallableStatement dAssign = dbConnection.getDBConnection().prepareCall("begin  srl_fnd_sms_pkg.schedule_sms; end;");
                dAssign.execute();
                dAssign.close();

                stmt = dbConnection.getDBConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = stmt.executeQuery("select  ASSIGNMENT_ID , PHONE_NO , MESSAGE_TXT  from SRL_FND_SMS_EMAIL_V001");

                ///getRowCount
                for (int i = 1; i <= getRowCount(rs); i++) {
                    rs.absolute(i); //MOVE TO ROW

                    String l_response = new String();
                    try {
                        OkHttpClient client = new OkHttpClient().newBuilder().build();
                        MediaType mediaType = MediaType.parse("application/json");
                        RequestBody body = RequestBody.create(mediaType, "{\"loginId\":\"92330021155\",\"loginPassword\":\"Test123\",\"Destination\":\"" + rs.getString("PHONE_NO") + "\",\"Mask\":\"TEST\",\"Message\":\"" + rs.getString("MESSAGE_TXT") + "\",\"UniCode\":\"0\",\"ShortCodePrefered\":\"n\"}");
                        Request request = new Request.Builder()
                                .url("http://cbs.zong.com.pk/reachrestapi/home/SendQuickSMS")
                                .method("POST", body)
                                .addHeader("Content-Type", "application/json")
                                .build();
                        Response response = client.newCall(request).execute();
                        l_response = response.body().string();
                    } catch (Exception ex) {
                        l_response = ex.getMessage();
                    }

                    //Complete Log Status
                    CallableStatement dCall = dbConnection.getDBConnection().prepareCall("begin   srl_fnd_sms_pkg.post_fnd_sms(" + rs.getString("ASSIGNMENT_ID") + ",'" + l_response + "'); end;");
                    dCall.execute();
                    dCall.close();
                }
                stmt.close();

            } catch (NullPointerException | SQLException e) {
                Console.write("Reporting Error " + e.getMessage());
            }
        }
    } //SMS

    //Trax Thread
    public void TRACKING() {
        DB dbConnection = new DB();
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                Trax Trax = new Trax(dbConnection);
                Trax.StartOrderTracking();
            } catch (Exception e) {
                Console.write("Error :TRACKING /  " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    public void BlueX() {
        DB db = new DB();

        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                BlueX bluex = new BlueX(db);
                bluex.generateCN();
            } catch (Exception e) {
                Console.write("Error BlueX Threas: " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    public void POSTEX_DHL() {
        DB db = new DB();
         
        while (!this.isAppStop) {
            try {
                Thread.sleep(1000); // 1 sec
                ///CN Generation
                
                DHL dhl = new DHL(db);
                dhl.generateCN();
                
                PostEx PostEx = new PostEx(db);
                PostEx.generateCN();
                
            } catch (Exception e) {
                Console.write("Error BlueX Threas: " + e.toString());
                //  Console.allLog.info(e.toString());
            }
        }
    }

    /**
     * @return the ConsoleText
     */
    public static javax.swing.JTextArea getConsoleText() {
        return ConsoleText;
    }

    /**
     * @param aConsoleText the ConsoleText to set
     */
    public static void setConsoleText(javax.swing.JTextArea aConsoleText) {
        ConsoleText = aConsoleText;
    }

}
